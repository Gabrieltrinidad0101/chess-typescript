var p=Object.defineProperty;var x=(n,t,i)=>t in n?p(n,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):n[t]=i;var a=(n,t,i)=>(x(n,typeof t!="symbol"?t+"":t,i),i);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))s(e);new MutationObserver(e=>{for(const o of e)if(o.type==="childList")for(const l of o.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&s(l)}).observe(document,{childList:!0,subtree:!0});function i(e){const o={};return e.integrity&&(o.integrity=e.integrity),e.referrerpolicy&&(o.referrerPolicy=e.referrerpolicy),e.crossorigin==="use-credentials"?o.credentials="include":e.crossorigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function s(e){if(e.ep)return;e.ep=!0;const o=i(e);fetch(e.href,o)}})();const m=class{static getPieceByPosition(t){var i;if((i=this.initial)!=null&&i.dataChess&&this.initial.dataChess[t==null?void 0:t.x])return this.initial.dataChess[t.x][t.y]}static getPositionsOfAttack(t,i){this.initial.dataChess;for(const s of this.initial.dataChess)for(const e of s)for(const o of e.attackPosition??[])if(o.x===i.x&&o.y===i.y&&t.team!==e.team)return!0;return!1}};let c=m;a(c,"initial"),a(c,"chess",[[{name:"tower",team:"black"},{name:"pawn",team:"black"},{name:"",team:"space"},{name:"",team:"space"},{name:"",team:"space"},{name:"",team:"space"},{name:"pawn",team:"white"},{name:"tower",team:"white"}],[{name:"horse",team:"black"},{name:"pawn",team:"black"},{name:"",team:"space"},{name:"",team:"space"},{name:"",team:"space"},{name:"",team:"space"},{name:"pawn",team:"white"},{name:"horse",team:"white"}],[{name:"bishop",team:"black"},{name:"pawn",team:"black"},{name:"",team:"space"},{name:"",team:"space"},{name:"",team:"space"},{name:"",team:"space"},{name:"pawn",team:"white"},{name:"bishop",team:"white"}],[{name:"king",team:"black"},{name:"pawn",team:"black"},{name:"",team:"space"},{name:"",team:"space"},{name:"",team:"space"},{name:"",team:"space"},{name:"pawn",team:"white"},{name:"king",team:"white"}],[{name:"lady",team:"black"},{name:"pawn",team:"black"},{name:"",team:"space"},{name:"",team:"space"},{name:"",team:"space"},{name:"",team:"space"},{name:"pawn",team:"white"},{name:"lady",team:"white"}],[{name:"bishop",team:"black"},{name:"pawn",team:"black"},{name:"",team:"space"},{name:"",team:"space"},{name:"",team:"space"},{name:"",team:"space"},{name:"pawn",team:"white"},{name:"bishop",team:"white"}],[{name:"horse",team:"black"},{name:"pawn",team:"black"},{name:"",team:"space"},{name:"",team:"space"},{name:"",team:"space"},{name:"",team:"space"},{name:"pawn",team:"white"},{name:"horse",team:"white"}],[{name:"tower",team:"black"},{name:"pawn",team:"black"},{name:"",team:"space"},{name:"",team:"space"},{name:"",team:"space"},{name:"",team:"space"},{name:"pawn",team:"white"},{name:"tower",team:"white"}]]),(()=>{const t=new Array;for(let i=0;i<m.chess.length;i++){const s=new Array;for(let e=0;e<m.chess[i].length;e++)s.push({name:m.chess[i][e].name,positionX:i,positionY:e,hadMovie:!1,team:m.chess[i][e].team,attackPosition:[]});t.push(s)}m.initial={dataChess:t,turn:"white"}})();class r{constructor(){a(this,"actionShowPoints")}clearAttackPositions(t){t.attackPosition=[]}getPositionBaseOnPiece(t,i){return{x:t.x+i.positionX,y:t.y+i.positionY}}getCoordinatesTypeOfPiece(t,i){return{x:t.positionX,y:t.positionY,castling:i}}getPieceBaseOnPositionPiece(t,i){const s=this.getPositionBaseOnPiece(t,i);return c.getPieceByPosition(s)}generateAttckPositionsCallBack(t,i,s){t.forEach(e=>{const o=this.getPieceBaseOnPositionPiece(e,i);s(o)})}generateAttckPositions(t,i){this.generateAttckPositionsCallBack(t,i,s=>{this.calculatePointPosition(i,s)})}generateLinesAttackPosition(t,i){i.forEach(s=>{this.getLineOfAttack({...t,x:s.x,y:s.y})})}getLineOfAttack(t){var k;const{coordinatesType:i,pieceInterface:s,x:e,y:o,limit:l,pieceNoAttack:h,pieceAttack:u}=t,P={x:((i==null?void 0:i.x)??s.positionX)+e,y:((i==null?void 0:i.y)??s.positionY)+o},w=c.getPieceByPosition(P);l===1||w==null||h.includes(w.team)||((k=s.attackPosition)==null||k.push(P),w.team!=u&&this.getLineOfAttack({...t,limit:l-1,coordinatesType:P}))}calculatePointPosition(t,i){var s;!i||t.team===i.team||(s=t.attackPosition)==null||s.push({x:i.positionX,y:i.positionY})}}class A{constructor(){a(this,"analysisPositions",new r)}generateAttackPositions(t){const i=[{x:2,y:1},{x:2,y:-1},{x:-2,y:1},{x:-2,y:-1},{x:1,y:2},{x:-1,y:2},{x:1,y:-2},{x:-1,y:-2}];this.analysisPositions.generateAttckPositions(i,t)}}class y{constructor(){a(this,"analysisPositions",new r)}generateAttackPositions(t){const i=[{x:1,y:0},{x:0,y:-1},{x:0,y:1},{x:-1,y:0}];this.analysisPositions.generateLinesAttackPosition({pieceInterface:t,limit:1/0,pieceNoAttack:[t.team],pieceAttack:t.team==="black"?"white":"black"},i)}}class b{constructor(){a(this,"analysisPositions",new r)}generateAttackPositions(t){const i=[{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1},{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1}];if(this.analysisPositions.generateAttckPositions(i,t),t.hadMovie)return;const s=[{x:-1,y:0},{x:-2,y:0,castling:"left"}],e=[{x:1,y:0},{x:2,y:0,castling:"right"}];this.castlingPositions(t,"left",s),this.castlingPositions(t,"rigth",e)}getPositionBaseOnPieceOfRey(t,i){const s={y:t.positionY,x:i==="left"?0:c.initial.dataChess[0].length-1},e=c.getPieceByPosition(s);if(!(!e||e.name!=="tower"||e.hadMovie))return e}castlingPositions(t,i,s){this.getPositionBaseOnPieceOfRey(t,i)&&this.castling(s,t)}castling(t,i){var o;let s=[],e=!1;this.analysisPositions.generateAttckPositionsCallBack(t,i,l=>{if(!l||e){s=[];return}const h=this.analysisPositions.getCoordinatesTypeOfPiece(l,t[1].castling);e=c.getPositionsOfAttack(i,h)||(l==null?void 0:l.team)!=="space",s.push(h)}),s.shift(),i.attackPosition=(o=i.attackPosition)==null?void 0:o.concat(s)}}class g{constructor(){a(this,"analysisPositions",new r)}generateAttackPositions(t){const i=[{x:1,y:1},{x:-1,y:-1},{x:-1,y:1},{x:1,y:-1}];this.analysisPositions.generateLinesAttackPosition({pieceInterface:t,limit:1/0,pieceNoAttack:[t.team],pieceAttack:t.team==="black"?"white":"black"},i)}}class v{constructor(){a(this,"analysisPositions",new r);a(this,"tower",new y);a(this,"bishop",new g)}generateAttackPositions(t){this.tower.generateAttackPositions(t),this.bishop.generateAttackPositions(t)}}class L{constructor(){a(this,"analysisPositions",new r)}generateAttackPositions(t){const i=t.team==="black"?1:-1,s=t.hadMovie?[{x:0,y:1*i}]:[{x:0,y:2*i},{x:0,y:1*i}],e=[{x:1*i,y:1*i},{x:-1*i,y:1*i}];this.analysisPositions.generateLinesAttackPosition({pieceInterface:t,limit:2,pieceNoAttack:["black","white"]},s),this.analysisPositions.generateAttckPositionsCallBack(e,t,o=>{var l;o===void 0||(o==null?void 0:o.team)==="space"||(o==null?void 0:o.team)===t.team||(l=t.attackPosition)==null||l.push({x:o.positionX,y:o.positionY})})}convertPawnIntoLady(t){debugger;const i=t.team=="black"?7:0;t.positionY===i&&(c.initial.dataChess[t.positionX][t.positionY]={...t,name:"lady"})}}class f{constructor(){a(this,"horse",new A);a(this,"tower",new y);a(this,"rey",new b);a(this,"bishop",new g);a(this,"lady",new v);a(this,"pawn",new L);a(this,"analysisPositions",new r);a(this,"actions",new Map([["horse",t=>{this.horse.generateAttackPositions(t)}],["tower",t=>{this.tower.generateAttackPositions(t)}],["king",t=>{this.rey.generateAttackPositions(t)}],["bishop",t=>{this.bishop.generateAttackPositions(t)}],["lady",t=>{this.lady.generateAttackPositions(t)}],["pawn",t=>{this.pawn.generateAttackPositions(t)}]]));a(this,"actionShowPoints")}gerenerateAttackPositionsByPiece(t){const i=this.actions.get(t.name);this.analysisPositions.clearAttackPositions(t),i&&i(t)}moveCastling(t,i){const s=this.rey.getPositionBaseOnPieceOfRey(i,t.castling||"right");if(!s)return;const e=this.analysisPositions.getPositionBaseOnPiece({x:t.castling==="left"?1:-1,y:0},i);this.movePiece(e,s)}movePiece(t,i){if(!i)return;const s={...i};s.positionX=t.x,s.positionY=t.y,t.castling&&this.moveCastling(t,s),c.initial.turn=c.initial.turn==="white"?"black":"white";const e=c.initial.dataChess;s.hadMovie=!0;const o={...e[t.x][t.y]};e[t.x][t.y]=s,e[i.positionX][i.positionY]={name:"",positionX:i.positionX,positionY:i.positionY,hadMovie:!1,team:"space",attackPosition:[]},s.name=="pawn"&&this.pawn.convertPawnIntoLady(s),o.name==="king"&&(alert(`lost ${o.team}`),window.location.href="/")}showAttackPosition(t){var i;console.log(c.initial.turn,"   ",t.team),c.initial.turn===t.team&&(c.initial.pieceFocus=t,console.log(t.attackPosition),(i=t.attackPosition)==null||i.forEach(s=>{this.actionShowPoints!==void 0&&this.actionShowPoints(s)}))}}class O{constructor(){a(this,"pieceLogic");a(this,"piecesIcon",new Map([["king-black","&#x265A;"],["lady-black","&#x265B;"],["tower-black","&#x265C;"],["bishop-black","&#x265D;"],["horse-black","&#x265E;"],["pawn-black","&#x265F;"],["king-white","&#x2654;"],["lady-white","&#x2655;"],["tower-white","&#x2656;"],["bishop-white","&#x2657;"],["horse-white","&#x2658;"],["pawn-white","&#x2659;"]]));this.pieceLogic=new f,this.pieceLogic.actionShowPoints=this.showPointsPosition.bind(this),window.addEventListener("click",t=>this.removeAllPointsPosition())}renderPiece(t){this.pieceLogic.gerenerateAttackPositionsByPiece(t);const i=document.createElement("div");return i.className=`team-${t.team} pieceHtml color-${this.backgroundColor(t.positionX,t.positionY)}`,i.innerHTML=this.piecesIcon.get(`${t.name}-${t.team}`)??"",i.addEventListener("click",s=>this.addEvent(s,t)),i}removeAllPointsPosition(){document.querySelectorAll(".pointHtml").forEach(t=>{t.setAttribute("style","visibility: hidden")})}showPointsPosition(t){const i=document.querySelector(`.position-${t.x}-${t.y}`);i==null||i.setAttribute("style","visibility: visible"),i==null||i.addEventListener("click",s=>{this.pieceLogic.movePiece(t,c.initial.pieceFocus),d()})}addEvent(t,i){this.removeAllPointsPosition(),t.stopPropagation(),this.pieceLogic.showAttackPosition(i)}backgroundColor(t,i){return(t%2?i%2==0:i%2!=0)?"black":"white"}}const C=(n,t)=>{const i=document.createElement("div");return n.forEach(s=>{const e=document.createElement("div");e.className="containerPieceAndPointPosition";const o=t(s);e.appendChild(o.divPiece),e.appendChild(o.pointPosition),i.appendChild(e)}),i},B=n=>{const i=new O().renderPiece(n),s=document.createElement("div");return s.className=`pointHtml position-${n.positionX}-${n.positionY}`,{divPiece:i,pointPosition:s}},d=()=>{const n=document.querySelector(".table");if(!n)return;n.innerHTML="";const t=c.initial.dataChess,i=new DocumentFragment;t.forEach(s=>{const e=C(s,o=>B(o));i.append(e)}),n.appendChild(i)};d();
